@page "/"
@using TaskSix_TagConvo.Client.Services.Interfaces;
@using TaskSix_TagConvo.Shared.Model;
@inject IChatService ChatService
@inject ISnackbar Snackbar

<PageTitle>TagChat</PageTitle>
<MudGrid Style="height:100%">
    <MudItem xs="3">
        <MudStack>
            <MudAutocomplete T="string" Label="Tags" @bind-Value="tagInputValue" SearchFunc="@SearchTags" Immediate="true"
                             ResetValueOnEmptyText="false"
                             CoerceText="true" CoerceValue="false"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@AddDisplayedTagInputValue" />
            <MudDivider />
            <MudChipSet AllClosable="true" OnClose="HandleDisplayedTagClosed">
                @foreach (var tagId in showMessagesWithTags)
                {
                    <MudChip Value="@tagId" Text="@allTags.Single(x=>x.Id==tagId).Name"></MudChip>
                }
            </MudChipSet>
        </MudStack>
    </MudItem>
    <MudItem xs="9">
        <MudPaper Style="height:100%">
            <MudStack Style="height:100%" Justify="Justify.SpaceBetween">
                <MudList>
                    @foreach (Message msg in displayedMessages)
                    {
                        <MudListItem Text="@msg.Content" />
                    }
                </MudList>
                <MudStack Justify="Justify.SpaceBetween" Row="true">
                    <MudTextField @bind-Value="messageInputValue" Variant="Variant.Outlined"></MudTextField>
                    <MudIconButton OnClick="@SendMessageFromInputValues" Class="pa-0" Icon="@Icons.Material.Filled.Send" Color="Color.Primary" aria-label="send"></MudIconButton>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    List<Message> displayedMessages = new();
    List<Guid> showMessagesWithTags = new();
    List<string> myMessageTags = new();
    List<Tag>? allTags;

    string tagInputValue = string.Empty;
    string messageInputValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await SetDisplayedMessages(showMessagesWithTags.ToArray());
        // await SendMessage("Test message 2", new string[] { "tag1", "tag2" });
    }
    private async Task SendMessageFromInputValues()
    {
        Message? msg = await SendMessage(messageInputValue, myMessageTags.ToArray());
        if (msg != null)
        {
            displayedMessages.Add(msg);
            messageInputValue = string.Empty;
        }
        else
            ShowError("Couldnt send message!");
    }
    private async Task<Message?> SendMessage(string message, string[] tags)
    {
        return await ChatService.SendMessage(message, tags);
    }
    private async Task SetDisplayedMessages(Guid[] tagIds)
    {
        displayedMessages = await ChatService.GetFilteredMessages(tagIds);
    }
    private async Task SetTags()
    {
        allTags = await ChatService.GetTags();
    }
    private async Task<IEnumerable<string>> SearchTags(string value)
    {
        if (allTags == null) await SetTags();
        if (allTags == null) return new List<string>();
        if (string.IsNullOrEmpty(value))
            return allTags.Select(x => x.Name);
        return allTags.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task AddDisplayedTagInputValue()
    {
        if (allTags==null) return;
        Guid addedId = allTags.Single(x => x.Name == tagInputValue).Id;
        if (showMessagesWithTags.Contains(addedId)) return;
        showMessagesWithTags.Add(addedId);
        tagInputValue = string.Empty;
        await SetDisplayedMessages(showMessagesWithTags.ToArray());
    }
    private async Task HandleDisplayedTagClosed(MudChip chip) 
    {
        showMessagesWithTags.Remove((Guid)chip.Value); 
        await SetDisplayedMessages(showMessagesWithTags.ToArray());    
    }
    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error);

    }
}
