@page "/"
@using TaskSix_TagConvo.Client.Services.Interfaces;
@using TaskSix_TagConvo.Shared.Model;
@inject IChatService ChatService
@inject ISnackbar Snackbar

<PageTitle>TagChat</PageTitle>
<MudGrid Style="height:100%">
    <MudItem xs="3">
        <MudStack>
            <MudAutocomplete T="string" Label="Tags" ValueChanged="@AddTagFilter" SearchFunc="@SearchTags" Immediate="true"
                             ResetValueOnEmptyText="false"
                             CoerceText="true" CoerceValue="false"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <MudDivider />
            <MudChipSet AllClosable="true" OnClose="HandleFilterTagRemoved">
                @foreach (var tag in showMessagesWithTags)
                {
                    <MudChip Value="@tag" Text="@tag.Name"></MudChip>
                }
            </MudChipSet>
        </MudStack>
    </MudItem>
    <MudItem xs="9">
        <MudPaper Style="height:100%">
            <MudStack Style="height:100%" Justify="Justify.SpaceBetween">
                <MudList Class="overflow-scroll" Style="height:70vh">
                    @foreach (Message msg in FilteredMessages)
                    {
                        <MudListItem>
                            <MudText Class="overflow-hidden">@msg.Content</MudText>
                        </MudListItem>
                    }
                </MudList>
                <MudStack>
                    <MudStack Justify="Justify.SpaceBetween" Row="true">
                        <MudAutocomplete T="string" Label="Tags" @bind-Value="myMessageTagInputValue" SearchFunc="@SearchTags" Immediate="false"
                                         ResetValueOnEmptyText="false"
                                         CoerceText="false" CoerceValue="true"
                                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                        <MudButton OnClick="@AddTagToMyMessage">Add</MudButton>
                        <MudChipSet AllClosable="true" OnClose="HandleMyMessageTagRemoved">
                            @foreach (string tag in myMessageTags)
                            {
                                <MudChip Value="@tag" Text="@tag"></MudChip>
                            }
                        </MudChipSet>
                    </MudStack>

                    <MudStack Justify="Justify.SpaceBetween" Row="true">
                        <MudTextField @bind-Value="messageInputValue" Variant="Variant.Outlined"></MudTextField>
                        <MudButton OnClick="@SendMessageFromInputValues" Color="Color.Primary">Send</MudButton>
                    </MudStack>
                </MudStack>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    List<Message> FilteredMessages = new();
    List<string> myMessageTags = new() { "test", "test2" };
    List<Tag> allTags = new();
    List<Tag> showMessagesWithTags = new();

    string messageInputValue = string.Empty;
    string myMessageTagInputValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAllTags();
        await LoadFilteredMessages(GetTagFilterIds());
    }
    private async Task SendMessageFromInputValues()
    {
        if (messageInputValue.Length == 0) return;
        Message? msg = await SendMessage(messageInputValue, myMessageTags.ToArray());
        if (msg != null)
        {
            FilteredMessages.Add(msg);
            messageInputValue = string.Empty;
        }
        else
            ShowError("Couldnt send message!");
    }
    private async Task<Message?> SendMessage(string message, string[] tags)
    {
        bool isNewTagsPresent = allTags.Select(x => x.Name).Any(x => !tags.Contains(x));

        Message? msg = await ChatService.SendMessage(message, tags);
        if (isNewTagsPresent)
            await ReloadAllTags();
        return msg;
    }
    private async Task LoadFilteredMessages(Guid[] tagIds)
    {
        FilteredMessages = await ChatService.GetFilteredMessages(tagIds);
    }
    private async Task ReloadAllTags()
    {
        allTags = await ChatService.GetTags();
    }
    private async Task<IEnumerable<string>> SearchTags(string value)
    {
        if (allTags == null) await ReloadAllTags();
        if (allTags == null) return new List<string>();
        if (string.IsNullOrEmpty(value))
            return allTags.Select(x => x.Name);
        return allTags.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task AddTagFilter(string tag)
    {
        if (allTags==null) return;
        Tag added = allTags.Single(x => x.Name == tag);
        if (showMessagesWithTags.Contains(added)) return;
        showMessagesWithTags.Add(added);
        await LoadFilteredMessages(GetTagFilterIds());
    }

    private async Task HandleFilterTagRemoved(MudChip chip)
    {
        showMessagesWithTags.Remove((Tag)chip.Value);
        await LoadFilteredMessages(GetTagFilterIds());
    }
    private void HandleMyMessageTagRemoved(MudChip chip)
    {
        myMessageTags.Remove(chip.Text);
    }
    private void AddTagToMyMessage()
    {
        if (myMessageTagInputValue.Length == 0) return;
        if (myMessageTags.Contains(myMessageTagInputValue)) return;
        myMessageTags.Add(myMessageTagInputValue);
    }
    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }
    private Guid[] GetTagFilterIds()
    {
        return showMessagesWithTags.Select(x => x.Id).ToArray();
    }
}
