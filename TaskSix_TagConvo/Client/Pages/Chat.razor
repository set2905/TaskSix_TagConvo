@page "/"
@using System.Text;
@using Microsoft.AspNetCore.SignalR.Client;
@using TaskSix_TagConvo.Client.Services.Interfaces;
@using TaskSix_TagConvo.Shared.Model;

@inject IChatService ChatService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation


<PageTitle>TagChat</PageTitle>
<MudGrid Style="height:100%">
    <MudItem xs="3">
        <MudStack>
            <MudAutocomplete T="string" Label="Tags" ValueChanged="@AddTagFilter" SearchFunc="@SearchTags" Immediate="true"
                             ResetValueOnEmptyText="false"
                             CoerceText="true" CoerceValue="false"
                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
            <MudDivider />
            <MudChipSet AllClosable="true" OnClose="HandleFilterTagRemoved">
                @foreach (var tag in showMessagesWithTags)
                {
                    <MudChip Value="@tag" Text="@tag.Name"></MudChip>
                }
            </MudChipSet>
        </MudStack>
    </MudItem>
    <MudItem xs="9">
        <MudPaper Style="height:100%">
            <MudStack Style="height:100%" Justify="Justify.SpaceBetween">
                <div class="d-flex flex-column px-4" style="max-height:75vh;min-height:75vh; overflow:scroll;" id="chatContainer">
                    @foreach (Message message in FilteredMessages)
                    {
                        <div class="d-flex flex-row my-4">
                            <div>
                                <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.SentDate.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                                <MudText Typo="Typo.body2" Style="padding: 15px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Content</MudText>
                            </div>
                        </div>
                    }
                </div>

                <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
                    <MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mt-n1 mx-4"
                    @bind-Value="messageInputValue" />
                    <MudButton OnClick="@SendMessageFromInputValues" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Primary" ButtonType="ButtonType.Button">Send</MudButton>
                </MudPaper>
                <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
                    <MudExpansionPanel Text="My Message Tags" MaxHeight="150">
                        <MudStack Row="true">
                            <MudAutocomplete Class="mx-4" T="string" Label="Search" @bind-Value="myMessageTagInputValue" SearchFunc="@SearchTags" Immediate="false"
                                             ResetValueOnEmptyText="false"
                                             CoerceText="false" CoerceValue="true"
                                             AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                            <MudButton OnClick="@AddTagToMyMessage">Add</MudButton>
                        </MudStack>
                        <MudChipSet AllClosable="true" OnClose="HandleMyMessageTagRemoved">
                            @foreach (string tag in myMessageTags)
                            {
                                <MudChip Value="@tag" Text="@tag"></MudChip>
                            }
                        </MudChipSet>
                    </MudExpansionPanel>
                </MudPaper>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    HubConnection hubConnection;

    List<Message> FilteredMessages = new();
    List<string> myMessageTags = new();
    List<Tag> allTags = new();
    List<Tag> showMessagesWithTags = new();

    string messageInputValue = string.Empty;
    string myMessageTagInputValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAllTags();
        await LoadFilteredMessages(GetTagFilterIds());
        if (hubConnection == null)
        {
            var uri = Navigation.ToAbsoluteUri("/messageHub");
            hubConnection = new HubConnectionBuilder().WithUrl(uri).Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }
        hubConnection.On<Message, string[]>("Message", (message, tags) =>
        {
            FilteredMessages.Add(message);
        });
    }
    private async Task SendMessageFromInputValues()
    {
        if (messageInputValue.Length == 0) return;
        StringBuilder msgBuilder = new();
        msgBuilder.Append(messageInputValue);
        foreach (string tag in myMessageTags)
        {
            msgBuilder.Append($" #{tag}");
        }
        Message? msg = await SendMessage(msgBuilder.ToString(), myMessageTags.ToArray());
        if (msg == null)
            ShowError("Couldnt send message!");
        else
            messageInputValue = string.Empty;

    }
    private async Task<Message?> SendMessage(string message, string[] tags)
    {
        bool isNewTagsPresent = allTags.Select(x => x.Name).Any(x => !tags.Contains(x));

        Message? msg = await ChatService.SendMessage(message, tags);
        if (isNewTagsPresent)
            await ReloadAllTags();
        return msg;
    }
    private async Task LoadFilteredMessages(Guid[] tagIds)
    {
        FilteredMessages = await ChatService.GetFilteredMessages(tagIds);
    }
    private async Task ReloadAllTags()
    {
        allTags = await ChatService.GetTags();
    }
    private async Task<IEnumerable<string>> SearchTags(string value)
    {
        if (allTags == null) await ReloadAllTags();
        if (allTags == null) return new List<string>();
        if (string.IsNullOrEmpty(value))
            return allTags.Select(x => x.Name);
        return allTags.Select(x => x.Name).Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task AddTagFilter(string tag)
    {
        if (allTags==null) return;
        Tag added = allTags.Single(x => x.Name == tag);
        if (showMessagesWithTags.Contains(added)) return;
        showMessagesWithTags.Add(added);
        await LoadFilteredMessages(GetTagFilterIds());
    }

    private async Task HandleFilterTagRemoved(MudChip chip)
    {
        showMessagesWithTags.Remove((Tag)chip.Value);
        await LoadFilteredMessages(GetTagFilterIds());
    }
    private void HandleMyMessageTagRemoved(MudChip chip)
    {
        myMessageTags.Remove(chip.Text);
    }
    private void AddTagToMyMessage()
    {
        if (myMessageTagInputValue.Length == 0) return;
        if (myMessageTags.Contains(myMessageTagInputValue)) return;
        myMessageTags.Add(myMessageTagInputValue);
        myMessageTagInputValue = string.Empty;
    }
    private void ShowError(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }
    private Guid[] GetTagFilterIds()
    {
        return showMessagesWithTags.Select(x => x.Id).ToArray();
    }
}
